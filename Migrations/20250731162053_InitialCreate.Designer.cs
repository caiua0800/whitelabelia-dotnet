// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using backend.Models;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250731162053_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("SaleItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer")
                        .HasColumnName("product_id");

                    b.Property<double>("ProductQtt")
                        .HasColumnType("double precision")
                        .HasColumnName("product_qtt");

                    b.Property<double?>("ProductUnityPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("product_unity_price");

                    b.Property<int?>("SaleId")
                        .HasColumnType("integer")
                        .HasColumnName("sale_id");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.HasIndex("SaleId");

                    b.ToTable("sale_items", (string)null);
                });

            modelBuilder.Entity("backend.DTOs.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("PaymentMethodId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("payment_method_id")
                        .HasAnnotation("Relational:JsonPropertyName", "payment_method_id");

                    b.Property<string>("PointOfInteraction")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("point_of_interaction")
                        .HasAnnotation("Relational:JsonPropertyName", "point_of_interaction");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("StatusDetail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status_detail")
                        .HasAnnotation("Relational:JsonPropertyName", "status_detail");

                    b.Property<string>("TransactionDetails")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("transaction_details")
                        .HasAnnotation("Relational:JsonPropertyName", "transaction_details");

                    b.HasKey("Id");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("backend.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("address_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("Complement")
                        .HasColumnType("text")
                        .HasColumnName("complement");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.Property<string>("Zipcode")
                        .HasColumnType("text")
                        .HasColumnName("zipcode");

                    b.HasKey("Id");

                    b.ToTable("enterprise_addresses", (string)null);
                });

            modelBuilder.Entity("backend.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("LoginId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("Permissions")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("permissions");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("admins", (string)null);
                });

            modelBuilder.Entity("backend.Models.Agent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("Prompt")
                        .HasColumnType("text")
                        .HasColumnName("prompt");

                    b.Property<string>("RealWhatsappNumber")
                        .HasColumnType("text")
                        .HasColumnName("real_whatsapp_number");

                    b.HasKey("Id");

                    b.ToTable("agents", (string)null);
                });

            modelBuilder.Entity("backend.Models.AgentPrompt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Text")
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("agent_prompts", (string)null);
                });

            modelBuilder.Entity("backend.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.HasKey("Id");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("backend.Models.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<string>("AgentNumber")
                        .HasColumnType("text")
                        .HasColumnName("agent_number");

                    b.Property<string>("City")
                        .HasColumnType("text")
                        .HasColumnName("city");

                    b.Property<string>("ClientCpfCnpj")
                        .HasColumnType("text")
                        .HasColumnName("client_cpf_cnpj");

                    b.Property<string>("ClientEmail")
                        .HasColumnType("text")
                        .HasColumnName("client_email");

                    b.Property<string>("ClientName")
                        .HasColumnType("text")
                        .HasColumnName("client_name");

                    b.Property<string>("ClientNameNormalized")
                        .HasColumnType("text")
                        .HasColumnName("client_name_normalized");

                    b.Property<string>("Complement")
                        .HasColumnType("text")
                        .HasColumnName("complement");

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("CustomPrompt")
                        .HasColumnType("text")
                        .HasColumnName("custom_prompt");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("LastMessages")
                        .HasColumnType("jsonb")
                        .HasColumnName("last_messages");

                    b.Property<string>("Neighborhood")
                        .HasColumnType("text")
                        .HasColumnName("neighborhood");

                    b.Property<string>("Number")
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.Property<string>("State")
                        .HasColumnType("text")
                        .HasColumnName("state");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Street")
                        .HasColumnType("text")
                        .HasColumnName("street");

                    b.PrimitiveCollection<List<int>>("Tags")
                        .HasColumnType("integer[]")
                        .HasColumnName("tags");

                    b.Property<string>("Zipcode")
                        .HasColumnType("text")
                        .HasColumnName("zipcode");

                    b.HasKey("Id");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("backend.Models.Enterprise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BrandName")
                        .HasColumnType("text")
                        .HasColumnName("brand_name");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cnpj");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("contact");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Domain")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("domain");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("FaviconUrl")
                        .HasColumnType("text")
                        .HasColumnName("favicon_url");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text")
                        .HasColumnName("logo_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("PrimaryColor")
                        .HasColumnType("text")
                        .HasColumnName("primary_color");

                    b.Property<string>("SecondaryColor")
                        .HasColumnType("text")
                        .HasColumnName("secondary_color");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Subdomain")
                        .HasColumnType("text")
                        .HasColumnName("subdomain");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_id");

                    b.HasKey("Id");

                    b.ToTable("enterprises", (string)null);
                });

            modelBuilder.Entity("backend.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AgentNumber")
                        .HasColumnType("text")
                        .HasColumnName("agent_number");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<bool>("IsRead")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_read");

                    b.Property<bool?>("IsReply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_reply");

                    b.Property<int>("MessageType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("message_type");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("backend.Models.MessageModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("body");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<int?>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("header");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("message_models", (string)null);
                });

            modelBuilder.Entity("backend.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string[]>("CategoryNames")
                        .HasColumnType("text[]")
                        .HasColumnName("category_names");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<double>("UnityPrice")
                        .HasColumnType("double precision")
                        .HasColumnName("unity_price");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("backend.Models.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("chat_id");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_updated");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<double?>("Discount")
                        .HasColumnType("double precision")
                        .HasColumnName("discount");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint")
                        .HasColumnName("payment_id");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<double?>("TotalAmount")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount");

                    b.Property<double?>("TotalAmountReceivable")
                        .HasColumnType("double precision")
                        .HasColumnName("total_amount_receivable");

                    b.Property<string>("TrackingUrl")
                        .HasColumnType("text")
                        .HasColumnName("tracking_url");

                    b.HasKey("Id");

                    b.ToTable("sales", (string)null);
                });

            modelBuilder.Entity("backend.Models.Shot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ActivationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("activation_date");

                    b.Property<string>("Body")
                        .HasColumnType("jsonb")
                        .HasColumnName("body");

                    b.Property<int?>("ClientsQtt")
                        .HasColumnType("integer")
                        .HasColumnName("clients_qtt");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<DateTime?>("EndShotDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_shot_date");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Header")
                        .HasColumnType("jsonb")
                        .HasColumnName("header");

                    b.Property<int?>("MessageModelId")
                        .HasColumnType("integer")
                        .HasColumnName("message_model_id");

                    b.Property<string>("ModelName")
                        .HasColumnType("text")
                        .HasColumnName("model_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("NameNormalized")
                        .HasColumnType("text")
                        .HasColumnName("name_normalized");

                    b.Property<DateTime?>("SendShotDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("send_shot_date");

                    b.Property<string>("SentClients")
                        .HasColumnType("jsonb")
                        .HasColumnName("sent_clients");

                    b.Property<string>("ShotFields")
                        .HasColumnType("jsonb")
                        .HasColumnName("shot_fields");

                    b.Property<string>("ShotHistory")
                        .HasColumnType("jsonb")
                        .HasColumnName("shot_history");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1)
                        .HasColumnName("status");

                    b.PrimitiveCollection<List<int>>("Tags")
                        .HasColumnType("integer[]")
                        .HasColumnName("tags");

                    b.HasKey("Id");

                    b.ToTable("shots", (string)null);
                });

            modelBuilder.Entity("backend.Models.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvaliableShots")
                        .HasColumnType("integer")
                        .HasColumnName("avaliable_shots");

                    b.Property<int?>("AvaliableStartChats")
                        .HasColumnType("integer")
                        .HasColumnName("avaliable_start_chats");

                    b.Property<int?>("AvaliableUsers")
                        .HasColumnType("integer")
                        .HasColumnName("avaliable_users");

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_paid");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<int?>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("SubscriptionTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("subscription_type_id");

                    b.HasKey("Id");

                    b.ToTable("subscriptions", (string)null);
                });

            modelBuilder.Entity("backend.Models.SubscriptionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DateCreated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created");

                    b.Property<int?>("Duration")
                        .HasColumnType("integer")
                        .HasColumnName("duration");

                    b.Property<double>("ImplantationValue")
                        .HasColumnType("double precision")
                        .HasColumnName("implantation_value");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int?>("ShotsQtt")
                        .HasColumnType("integer")
                        .HasColumnName("shots_qtt");

                    b.Property<int?>("StartChatsQtt")
                        .HasColumnType("integer")
                        .HasColumnName("start_chats_qtt");

                    b.Property<int?>("UsersQtt")
                        .HasColumnType("integer")
                        .HasColumnName("users_qtt");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("subscription_types", (string)null);
                });

            modelBuilder.Entity("backend.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BackgroundColor")
                        .HasColumnType("text")
                        .HasColumnName("background_color");

                    b.Property<string>("Color")
                        .HasColumnType("text")
                        .HasColumnName("color");

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_created")
                        .HasDefaultValueSql("NOW() AT TIME ZONE 'UTC'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("EnterpriseId")
                        .HasColumnType("integer")
                        .HasColumnName("enterprise_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("tags", (string)null);
                });

            modelBuilder.Entity("SaleItem", b =>
                {
                    b.HasOne("backend.Models.Sale", null)
                        .WithMany("SaleItems")
                        .HasForeignKey("SaleId");
                });

            modelBuilder.Entity("backend.Models.Shot", b =>
                {
                    b.OwnsOne("backend.Models.ShotFilter", "ShotFilters", b1 =>
                        {
                            b1.Property<int>("ShotId")
                                .HasColumnType("integer");

                            b1.Property<string>("SelectedClients")
                                .HasColumnType("jsonb")
                                .HasColumnName("selected_clients");

                            b1.Property<bool>("SelectedClientsStatus")
                                .HasColumnType("boolean")
                                .HasColumnName("selected_clients_status");

                            b1.Property<string>("TagFilter")
                                .HasColumnType("jsonb")
                                .HasColumnName("tag_filter");

                            b1.Property<bool>("TagFilterStatus")
                                .HasColumnType("boolean")
                                .HasColumnName("tag_filter_status");

                            b1.Property<int?>("TypeFilter")
                                .HasColumnType("integer")
                                .HasColumnName("type_filter");

                            b1.Property<bool>("TypeFilterStatus")
                                .HasColumnType("boolean")
                                .HasColumnName("type_filter_status");

                            b1.HasKey("ShotId");

                            b1.ToTable("shots");

                            b1.WithOwner()
                                .HasForeignKey("ShotId");
                        });

                    b.Navigation("ShotFilters");
                });

            modelBuilder.Entity("backend.Models.Sale", b =>
                {
                    b.Navigation("SaleItems");
                });
#pragma warning restore 612, 618
        }
    }
}
